#!/usr/bin/env bash

# Token refresh - trefresh

# Refreshes an access token. Either specify no arguments, meaning the default
# context, or a string representing the context, for example 'yt' for YouTube.
# If no context is specified, the script also checks for an environment variable
# OAUTH_CONTEXT.

# shellcheck disable=1090
. "$(dirname "$0")/tlib.sh"

main() {

  declare oauth_file_access_token oauth_file_refresh_token
  declare client_id_var client_secret_var

  setup "$1"

  # Determine the oauth file holding the info we're interested in.
  # Abort if the file doesn't exist.
  if [[ ! -f "$oauth_file_access_token" || ! -f "$oauth_file_refresh_token" ]]; then
    echo "Missing OAuth token data (check access or refresh token file)."
    exit 1
  fi

  # We need to use the refresh token that we've stored in
  # the OAuth data. Abort if we don't have one.
  local refresh_token
  refresh_token=$(cat "$oauth_file_refresh_token")
  if [[ -z "${refresh_token}" ]]; then
    echo No refresh token available.
    exit 1
  fi

  # Make the request to refresh the access token.
  local jsondata
  jsondata=$(curl \
    --fail \
    --silent \
    --data client_id="${!client_id_var}" \
    --data client_secret="${!client_secret_var}" \
    --data refresh_token="$refresh_token" \
    --data grant_type=refresh_token \
    "$GAPI_ENDPOINT_TOKEN")

  local rc=$?
  if [[ "$rc" -gt 0 ]]; then
    echo Failed to refresh token.
    exit 1
  fi

  jq -r .access_token <(echo "$jsondata") > "$oauth_file_access_token"

}

main "$@"
