#!/usr/bin/env bash

# Undeploys (deletes) a workflow definition, including active instances

# Bring in the required env for the script
source cpenv-home
source ~/.dotfiles/scripts/utils


# Retrieve an access token using the Client Credentials grant type
get_access_token() {
  curl \
    --silent \
    --netrc \
    --data "grant_type=client_credentials" \
    "${UAAROOT}/oauth/token" \
  | jq -r .access_token ;
}

# Present all workflow definitions, allow selection of one
select_workflow_definition() {
  curl \
    --silent \
    --header "Authorization: Bearer ${access_token}" \
    "${WORKFLOWAPIROOT}/v1/workflow-definitions" \
    | jq -r '.[] | "\(.id) (v \(.version))"' \
    | fzf ${FZF_OPTS} --prompt "Select workflow definition: " \
    | cut -d ' ' -f 1 ;
}


# Start new instance of workflow definition 'definition' with context 'context'
start_new_instance() {
  curl \
    --silent \
    --header "Authorization: Bearer ${access_token}" \
    --header "Content-Type: application/json" \
    --data "{\"definitionId\":\"${definition}\",\"context\":${context}}" \
    "${WORKFLOWAPIROOT}/v1/workflow-instances" \
  | jq -r '"\(.id) \(.status)"'
}


# Undeploy (delete) workflow definition 'definition', including active instances
undeploy_definition() {
  curl \
    --silent \
    --header "Authorization: Bearer ${access_token}" \
    --request DELETE \
    "${WORKFLOWAPIROOT}/v1/workflow-definitions/${definition}?cascade=true"
}

access_token=$(get_access_token)
log Access token retrieved: \'$(echo ${access_token} | cut -c 1-8)...\'

[ -z "$definition" ] && definition=$(select_workflow_definition)
log Workflow definition chosen: ${definition}
[ -z "$definition" ] && exit 0


# Double-check
read -p "Sure (y/n)? " yn
[[ ! "$yn" =~ ^(y|Y)$ ]] && exit 0


# Do it!
log Undeploying definition ${definition}
$(undeploy_definition)

